<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sanghunlee-711.github.io//</id><title>Sanghun Lee</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-08-15T20:32:10+09:00</updated> <author> <name>Sanghun lee</name> <uri>https://sanghunlee-711.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://sanghunlee-711.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://sanghunlee-711.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Sanghun lee </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>리액트에서 비즈니스 로직을 나눠보자[3 - ContextAPI마저 활용해보자]</title><link href="https://sanghunlee-711.github.io//posts/refactoring-3/" rel="alternate" type="text/html" title="리액트에서 비즈니스 로직을 나눠보자[3 - ContextAPI마저 활용해보자]" /><published>2022-05-12T12:33:00+09:00</published> <updated>2022-05-12T12:33:00+09:00</updated> <id>https://sanghunlee-711.github.io//posts/refactoring-3/</id> <content src="https://sanghunlee-711.github.io//posts/refactoring-3/" /> <author> <name>Sanghun lee</name> </author> <category term="FE" /> <category term="React" /> <summary> Props Drilling을 피해보기 2편의 hooks의 방식으로 state(상태)를 로컬에서 계속 가져가기를 바라면 대부분 페이지의 최상단에서 하단의 매칭된 컴포넌트까지 Props Drilling이 생기게 된다. 아래 예제를 한번 봐보자. 무엇이 문제였는가? 일단 공용으로 사용되는 컴포넌트를 한번 봐보자. 아래는 기간을 정할 수 있기 위해 사용하는 컴포넌트로 날짜와 시간을 정할 수 있는 컴포넌트이다. interface IPeriodSelectorProps { withTimes: boolean; labelText?: string; date: [Date, Date]; selectTime: string[]; handleStartDate: (date: Date) =&amp;gt; voi... </summary> </entry> <entry><title>리액트에서 비즈니스 로직을 나눠보자[2 - Hooks 를 테스트 해보자]</title><link href="https://sanghunlee-711.github.io//posts/refactoring-2/" rel="alternate" type="text/html" title="리액트에서 비즈니스 로직을 나눠보자[2 - Hooks 를 테스트 해보자]" /><published>2022-01-18T12:33:00+09:00</published> <updated>2022-01-18T22:57:40+09:00</updated> <id>https://sanghunlee-711.github.io//posts/refactoring-2/</id> <content src="https://sanghunlee-711.github.io//posts/refactoring-2/" /> <author> <name>Sanghun lee</name> </author> <category term="FE" /> <category term="React" /> <summary> 테스트 코드 작성해보기 이제 비즈니스로직을 모두 나누었으니 해당 비즈니스 로직에 대해서만 테스트를 진행해보자 여러 테크기업들의 블로그를 뒤적이다. 리디의 블로그글을 가장 많이 참고하였다. 그리하여 redux-mockstore와 testing-library/react-hooks 를 이용하여 테스트를 진행했다. 우선 간단한 설명은 아래와 같다. mock-store를 통해 실제 액션을 리듀서까지 전달하여 업데이트하는 것이 아닌 어떤 액션이 dispatching되는지 확인한다. hooks mocking render 하여 필요한 메서드들을 빼와서 act 시킨 다음의 호출되는 액션을 mocking store를 통해 확인한다. localState의 경우 jest mock fn을 통해 처리한다.... </summary> </entry> <entry><title>리액트에서 비즈니스 로직을 나눠보자[1 - 비즈니스로직 분리]</title><link href="https://sanghunlee-711.github.io//posts/refactoring-1/" rel="alternate" type="text/html" title="리액트에서 비즈니스 로직을 나눠보자[1 - 비즈니스로직 분리]" /><published>2021-12-15T12:33:00+09:00</published> <updated>2022-01-18T15:41:26+09:00</updated> <id>https://sanghunlee-711.github.io//posts/refactoring-1/</id> <content src="https://sanghunlee-711.github.io//posts/refactoring-1/" /> <author> <name>Sanghun lee</name> </author> <category term="FE" /> <category term="React" /> <summary> 왜 하게 되었냐면 회사에서 개발자 다수가 이탈하게 되면서 빠른 유지보수와 코드의 정확성을 높이는 일이 나에게도, 회사에게도 중요해졌다. 현재 리액트 프로젝트에서 Toolkit과 Saga를 통해서 나름 나눈다고 나눴지만 이 과정에서 불필요한 코드들도 많아졌고, 실제로 state나 hooks와 연결된 부분은 컴포넌트에 그대로 남아있게 되었다. 그래서 리팩토링이 필요한 상황이었다. 마침 앵귤러로 진행된 다른 프로젝트를 조금씩 리액트로 포팅하는 와중이라 앵귤러의 구현 개념을 맛보고 즐기고 있었는데, Nest JS에서 했던 방식과 유사하게(역시 같은팀이 맞다. 공식문서 말대로 똑같음) Service와 Controller가 나눠진 상태였고 리액트에서도 이와 같은 방식은 아니더라도 로직과 뷰의 분리는 필... </summary> </entry> <entry><title>LeetCode 문제풀이(704.Binary Search)</title><link href="https://sanghunlee-711.github.io//posts/LeetCode.BinarySearch/" rel="alternate" type="text/html" title="LeetCode 문제풀이(704.Binary Search)" /><published>2021-12-03T12:33:00+09:00</published> <updated>2021-12-07T23:45:06+09:00</updated> <id>https://sanghunlee-711.github.io//posts/LeetCode.BinarySearch/</id> <content src="https://sanghunlee-711.github.io//posts/LeetCode.BinarySearch/" /> <author> <name>Sanghun lee</name> </author> <category term="LeetCode" /> <category term="BinarySearch" /> <summary> 시작하게 된 이유 리트코드 14일 알고리즘 부시기 코스라고 적혀있는 것을 시작한 이유는 최근 프로그래머스를 통해 자료구조 강의를 보고 있기 때문이다. 프로그래머스에서 1단계 문제를 모두 풀고 난 뒤 2단계를 하려던 와중 기본지식(자료구조, 알고리즘 개념)이 부족하여 강의를 이것저것 찾아 듣고있는 상태인데 그래도 유명하다는 리트코드 Easy레벨 문제도 풀어봐야 되지 않겠나.. 라는 생각으로 접했는데 생각보다 꽤 어렵다 ㅎㅅㅎ.. 1. 704.Binary Search Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nu... </summary> </entry> <entry><title>SQL공부를 조금이라도 하자[프로그래머스 문제 풀기]</title><link href="https://sanghunlee-711.github.io//posts/sql-test/" rel="alternate" type="text/html" title="SQL공부를 조금이라도 하자[프로그래머스 문제 풀기]" /><published>2021-10-13T12:33:00+09:00</published> <updated>2021-12-07T23:45:06+09:00</updated> <id>https://sanghunlee-711.github.io//posts/sql-test/</id> <content src="https://sanghunlee-711.github.io//posts/sql-test/" /> <author> <name>Sanghun lee</name> </author> <category term="BE" /> <category term="SQL" /> <summary> SQL 정리한 이유 매번 TypeORM의 엄청난 도움을 받으며 포트폴리오를 위한 서버를 구현하다가 팔로우 관계와 유사한 기능이 있는 경우 M:N으로 조인된 컬럼의 데이터를 지워줘야하는 필요성이 생겼다. 그래서 queryBuilder를 통해서 지워주는 방법이 있다는 것을 알게되고 간단한 방법으로 구현하게는 되었으나, 언젠가 SQL의 깊지는 않아도 간단한 문법은 구현할 수 있어야한다는 생각으로 프로그래머스 문제-SQL 고득점 Kit를 풀어보았다. 아래는 간략하게 풀며 정리한 내용이며 추가적으로 신기한 구현방법이 있으면 수정하겠다. 1. SELECT 모든 레코드 조회하기 동물 보호소에 들어온 모든 동물의 정보를 ANIMAL_ID순으로 조회하는 SQL문을 작성해주세요. SELECT * F... </summary> </entry> </feed>
